package com.example.myapplication.ui.main


import android.content.ContentValues
import android.content.Context
import android.os.Build
import android.provider.MediaStore
import android.util.Log
import androidx.lifecycle.LiveData
import androidx.lifecycle.MutableLiveData
import androidx.lifecycle.ViewModel
import androidx.lifecycle.asLiveData
import androidx.lifecycle.viewModelScope
import com.example.myapplication.data.model.Post
import com.example.myapplication.data.repository.PostRepository
import com.google.gson.Gson
import com.google.gson.reflect.TypeToken
import kotlinx.coroutines.launch
import java.io.File
import java.io.OutputStream


class MainViewModel(val repository: PostRepository): ViewModel(){
    val posts:LiveData<List<Post>> = repository.allPost.asLiveData()

    val _error = MutableLiveData<String>()
    val error:LiveData<String> get() = _error

    init {
        // ƒê·∫£m b·∫£o LiveData ƒë∆∞·ª£c observe tr∆∞·ªõc khi fetch API
        viewModelScope.launch {
            val postsFromApi = repository.fetchAllPost()
            if (postsFromApi.isEmpty()) {
                _error.postValue("Cannot fetch posts or API empty")
            }
        }
    }


    fun insertPost(post: Post) = viewModelScope.launch { repository.insertPost(post) }
    fun insertPosts(posts:List<Post>) = viewModelScope.launch { repository.insertPosts(posts) }
    fun deletePost(post: Post) = viewModelScope.launch { repository.deletePost(post) }
    fun updatepost(post:Post) = viewModelScope.launch { repository.updatePost(post) }

    fun savePostsToPublicDownloads(context: Context) {
        viewModelScope.launch {
            try {
                val postsToSave = posts.value
                if (postsToSave.isNullOrEmpty()) {
                    _error.postValue("Kh√¥ng c√≥ b√†i ƒëƒÉng n√†o ƒë·ªÉ l∆∞u.")
                    return@launch
                }

                val gson = Gson()
                val jsonString = gson.toJson(postsToSave)

                val fileName = "MyApplicationPosts_${System.currentTimeMillis()}.json"
                var outputStream: OutputStream? = null

                try {
                    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.Q) {
                        // D√†nh cho Android 10 (API 29) tr·ªü l√™n
                        val contentResolver = context.contentResolver
                        val contentValues =
                            ContentValues().apply {
                                put(MediaStore.MediaColumns.DISPLAY_NAME,fileName)
                                put(MediaStore.MediaColumns.MIME_TYPE, "application/json")
                                put(MediaStore.MediaColumns.RELATIVE_PATH, "Download/MyApplication")
//                              put(MediaStore.MediaColumns.DATE_ADDED, System.currentTimeMillis() / 1000)
//                              put(MediaStore.MediaColumns.SIZE, fileSize)
                            }
                        val uri = contentResolver.insert(MediaStore.Downloads.EXTERNAL_CONTENT_URI, contentValues)
                        outputStream = uri?.let { contentResolver.openOutputStream(it) }
                    } else {
                        // D√†nh cho Android 9 (API 28) tr·ªü xu·ªëng
                        @Suppress("DEPRECATION")
                        val downloadsDir =
                            android.os.Environment.getExternalStoragePublicDirectory(android.os.Environment.DIRECTORY_DOWNLOADS)
                        val appDir = File(downloadsDir, "MyApplication")
                        if (!appDir.exists()) {
                            appDir.mkdir()
                        }
                        val file = File(appDir, fileName)
                        outputStream = file.outputStream()
                    }

                    outputStream?.use { it.write(jsonString.toByteArray()) }
                    _error.postValue("L∆∞u file public th√†nh c√¥ng v√†o th∆∞ m·ª•c Downloads/MyApplication")

                } finally {
                    outputStream?.close()
                }

            } catch (e: Exception) {
                _error.postValue("L·ªói khi l∆∞u file public: ${e.message}")
            }
        }
    }

    fun savePostsToExternalPrivate(context: Context) {
        viewModelScope.launch {
            try {
                // ‚ö° L·∫•y danh s√°ch b√†i post t·ª´ LiveData hi·ªán c√≥
                val postsToSave = posts.value
                if (postsToSave.isNullOrEmpty()) {
                    _error.postValue("Kh√¥ng c√≥ b√†i ƒëƒÉng n√†o ƒë·ªÉ l∆∞u.")
                    return@launch
                }

                // ‚ö° Chuy·ªÉn list Post th√†nh chu·ªói JSON
                val gson = Gson()
                val jsonString = gson.toJson(postsToSave)

                // ‚ö° Ghi file ra external private storage
                val file = File(context.getExternalFilesDir(null), "posts_private.json") // t·∫°o ƒë·ªëi t∆∞∆°ng file,ch∆∞a t·∫°o file th·∫≠t.
                file.writeText(jsonString) //t·∫°o file + ghi d·ªØ li·ªáu

                // ‚ö° In log ƒë∆∞·ªùng d·∫´n
                Log.d("FilePath", "‚úÖ File saved at: ${file.absolutePath}")

                _error.postValue("L∆∞u file private th√†nh c√¥ng!")

            } catch (e: Exception) {
                Log.e("FilePath", "‚ùå Error saving file: ${e.message}")
                _error.postValue("L·ªói khi l∆∞u file private: ${e.message}")
            }
        }
    }

    fun loadPostsFromExternalPrivate(context: Context): List<Post>? {
        return try {
            val file = File(context.getExternalFilesDir(null), "posts_private.json")
            if (!file.exists()) return null

            val json = file.readText() //ƒë·ªçc d·ªØ li·ªáu
            val gson = Gson()
            val type = object : TypeToken<List<Post>>() {}.type
            gson.fromJson<List<Post>>(json, type)

        } catch (e: Exception) {
            Log.e("FilePath", "‚ùå Error reading file: ${e.message}")
            null
        }
    }


}

//    fun savePostsToExternalPrivate(context: Context) {
//        viewModelScope.launch {
//            try {
//                // ‚ö° L·∫•y danh s√°ch b√†i post t·ª´ LiveData hi·ªán c√≥
//                val postsToSave = posts.value
//                if (postsToSave.isNullOrEmpty()) {
//                    _error.postValue("Kh√¥ng c√≥ b√†i ƒëƒÉng n√†o ƒë·ªÉ l∆∞u.")
//                    return@launch
//                }
//
//                // ‚ö° Chuy·ªÉn list Post th√†nh chu·ªói JSON
//                val gson = Gson()
//                val jsonString = gson.toJson(postsToSave)
//
//                // ‚ö° Ghi file ra external private storage
//                val file = File(context.getExternalFilesDir(null), "posts_private.json")
//                file.writeText(jsonString)
//
//                // ‚ö° In log ƒë∆∞·ªùng d·∫´n
//                Log.d("FilePath", "‚úÖ File saved at: ${file.absolutePath}")
//
//                _error.postValue("L∆∞u file private th√†nh c√¥ng!")
//
//            } catch (e: Exception) {
//                Log.e("FilePath", "‚ùå Error saving file: ${e.message}")
//                _error.postValue("L·ªói khi l∆∞u file private: ${e.message}")
//            }
//        }
//    }
//
//    fun loadPostsFromExternalPrivate(context: Context): List<Post>? {
//        return try {
//            val file = File(context.getExternalFilesDir(null), "posts_private.json")
//            if (!file.exists()) return null
//
//            val json = file.readText()
//            val gson = Gson()
//            val type = object : TypeToken<List<Post>>() {}.type
//            gson.fromJson<List<Post>>(json, type)
//Trong Kotlin, m·ªçi kh·ªëi l·ªánh (block) nh∆∞
//if, when, try, let, run, apply, v.v.
//ƒë·ªÅu c√≥ th·ªÉ ƒë∆∞·ª£c coi l√† bi·ªÉu th·ª©c (expression) ‚Äî t·ª©c l√† n√≥ tr·∫£ v·ªÅ m·ªôt gi√° tr·ªã.
//
//üëâ V√† gi√° tr·ªã tr·∫£ v·ªÅ c·ªßa block ƒë√≥ ch√≠nh l√† gi√° tr·ªã c·ªßa d√≤ng cu·ªëi c√πng b√™n trong n√≥
//(mi·ªÖn d√≤ng ƒë√≥ kh√¥ng c√≥ return, throw, hay k·∫øt th√∫c s·ªõm).
//        } catch (e: Exception) {
//            Log.e("FilePath", "‚ùå Error reading file: ${e.message}")
//            null
//        }
//    }
//
//    /**
//     * L∆∞u danh s√°ch b√†i ƒëƒÉng v√†o th∆∞ m·ª•c Downloads c√¥ng c·ªông.
//     * File n√†y s·∫Ω kh√¥ng b·ªã x√≥a khi g·ª° app.
//     */
//    fun savePostsToPublicDownloads(context: Context) {
//        viewModelScope.launch {
//            try {
//                val postsToSave = posts.value
//                if (postsToSave.isNullOrEmpty()) {
//                    _error.postValue("Kh√¥ng c√≥ b√†i ƒëƒÉng n√†o ƒë·ªÉ l∆∞u.")
//                    return@launch
//                }
//
//                val gson = Gson()
//                val jsonString = gson.toJson(postsToSave)
//
//                val fileName = "MyApplicationPosts_${System.currentTimeMillis()}.json"
//                var outputStream: OutputStream? = null // lu·ªìng d·∫´n d·ªØ li·ªáu ra, file:chai, n∆∞·ªõc: d·ªØ li·ªáu, OutputStream: c√°i ph·ªÖu
//
//                try {
//                    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.Q) {
//                        // D√†nh cho Android 10 (API 29) tr·ªü l√™n
//                        val contentResolver = context.contentResolver // ng∆∞·ªùi mang th√¥ng tin ƒë√≥ ƒëi ƒëƒÉng k√Ω v·ªõi h·ªá th·ªëng
// android 10+ , google d√πng contentResolver ƒë·ªÉ G·ª≠i y√™u c·∫ßu ƒë·ªçc ho·∫∑c ghi d·ªØ li·ªáu qua URI (ƒë·ªãa ch·ªâ n·ªôi dung) , b·∫£o m·∫≠t h∆°n do c√≥ contentResolver ki·ªÉm duy·ªát
//H·ªá th·ªëng ki·ªÉm tra quy·ªÅn, r·ªìi cho ph√©p b·∫°n truy c·∫≠p ho·∫∑c ghi d·ªØ li·ªáu, do android < 10 ghi tr·ª±c ti·∫øp ƒë√£ b·ªã ch·∫∑n
//
//                        val contentValues = ContentValues().apply { //ContentValues():  T·ªù gi·∫•y khai th√¥ng tin file‚Äù
//                            put(MediaStore.MediaColumns.DISPLAY_NAME, fileName)  // mediastore :l∆∞u tr·ªØ to√†n bo media
//                            put(MediaStore.MediaColumns.MIME_TYPE, "application/json")
//                            put(MediaStore.MediaColumns.DOWNLOAD, "Download/MyApplication")
//                            put(MediaStore.MediaColumns.DATE_ADDED, "Download/MyApplication")
//                            put(MediaStore.MediaColumns.SIZE, "Download/MyApplication")
//
//                        }
//                        val uri = contentResolver.insert(MediaStore.Downloads.EXTERNAL_CONTENT_URI, contentValues)
//ƒê√¢y l√† l·ªánh g·ª≠i ‚Äút·ªù khai‚Äù ƒë√≥ cho h·ªá th·ªëng Android.
// g·ª≠i file ƒë·∫øn aandroid,n·∫øu h·ª£p l·ªá th√¨  t·∫°o m·ªôt file r·ªóng ch·ªâ l√† placeholder, ch∆∞a c√≥ n·ªôi dung. trong download
// ,M·ªôt s·ªë launcher ho·∫∑c tr√¨nh qu·∫£n l√Ω file c√≥ th·ªÉ ch∆∞a hi·ªÉn th·ªã file n√†y ngay n·∫øu ch∆∞a c√≥ d·ªØ li·ªáu.
//Chu·∫©n b·ªã URI v√† v·ªã tr√≠ l∆∞u
// ch∆∞a ghi d·ªØ li·ªáu

//Sau ƒë√≥ Android tr·∫£ v·ªÅ cho b·∫°n 1 c√°i uri(L√† m√£ ƒë·ªãnh danh duy nh·∫•t (ID) c·ªßa file b·∫°n v·ª´a t·∫°o.) ƒë·∫°i di·ªán cho file ƒë√≥.
// id n√†y ghi trong database n·ªôi boo c·ªßa android mediastore
//// T√¥i mu·ªën g·ª≠i file n√†y v√†o khu Downloads trong MediaStore nh√©
//// MediaStore.Downloads.EXTERNAL_CONTENT_URI :C√°nh c·ª≠a d·∫´n t·ªõi kho Download,
//                         outputStream = uri?.let { contentResolver.openOutputStream(it) }
//// ‚ÄúM·ªü cho t√¥i m·ªôt c√°i v√≤i n·ªëi t·ª´ app c·ªßa t√¥i ƒë·∫øn c√°i file th·∫≠t ƒë√≥, ƒë·ªÉ t√¥i r√≥t d·ªØ li·ªáu JSON v√†o file ƒë√≥.‚Äù
//Kh√¥ng t·∫°o file m·ªõi, ch·ªâ s·ª≠ d·ª•ng file r·ªóng/placeholder ƒë√£ c√≥.
//D√πng URI t·ª´ insert() ƒë·ªÉ ghi d·ªØ li·ªáu v√†o file ƒë√£ t·∫°o
// c√≥ th·ªÉ ghi d·ªØ li·ªáu
////outputStream ch√≠nh l√† c√°i v√≤i d·∫´n d·ªØ li·ªáu.

//üí° Nh·ªõ:
//Kh√¥ng openOutputStream() ‚Üí file v·∫´n r·ªóng, kh√¥ng d√πng ƒë∆∞·ª£c.
//Ph·∫£i openOutputStream() + write() ‚Üí file m·ªõi c√≥ n·ªôi dung th·ª±c t·∫ø.
//                    } else {
//                        // D√†nh cho Android 9 (API 28) tr·ªü xu·ªëng
//                        @Suppress("DEPRECATION")
//                        val downloadsDir = android.os.Environment.getExternalStoragePublicDirectory(android.os.Environment.DIRECTORY_DOWNLOADS) // l·∫•y ƒë∆∞·ªùng d·∫´n ƒë·∫øn download tr√™n thieets b·ªã
//                        val appDir = File(downloadsDir, "MyApplication")
// t·∫°o ƒë·ªëi t∆∞·ª£ng File trong Kotlin, ki·ªÉu nh∆∞ ‚Äúƒë·∫∑t t√™n, chu·∫©n b·ªã ƒë∆∞·ªùng d·∫´n‚Äù, ch∆∞a sinh ra file tr√™n m√°y.
//                        if (!appDir.exists()) {
//                            appDir.mkdir() // mkdir() T·∫†O th∆∞ m·ª•c th·∫≠t trong Download/
//                        }
//                        val file = File(appDir, fileName)
//                        outputStream = file.outputStream() // T·∫†O file th·∫≠t n·∫øu ch∆∞a c√≥ v√† m·ªü ƒë·ªÉ ghi d·ªØ li·ªáu
//                    }
//
//                    outputStream?.use { it.write(jsonString.toByteArray()) } // ghi v√†o file
// OutputStream.write() ch·ªâ ch·∫•p nh·∫≠n m·∫£ng byte (ByteArray) ,toByteArray(): CHuy·ªÉn th√†nh byte
//                    _error.postValue("L∆∞u file public th√†nh c√¥ng v√†o th∆∞ m·ª•c Downloads/MyApplication")
//
//                } finally {
//                    outputStream?.close()
//                }
//
//            } catch (e: Exception) {
//                _error.postValue("L·ªói khi l∆∞u file public: ${e.message}")
//            }
//        }
 //   }


